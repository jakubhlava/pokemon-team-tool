// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Team          Team[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pokemon {
  id          String        @id @default(cuid())
  name        String        @unique
  nameId      String        @unique
  typeOne     String
  typeTwo     String?
  TeamPokemon TeamPokemon[]
}

model Team {
  id          String        @id @default(cuid())
  name        String
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  description String?
  TeamPokemon TeamPokemon[]
}

model TeamPokemon {
  id          String  @id @default(cuid())
  team        Team    @relation(fields: [teamId], references: [id])
  teamId      String
  pokemon     Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId   String
  moveOneId   String?
  moveTwoId   String?
  moveThreeId String?
  moveFourId  String?
}
